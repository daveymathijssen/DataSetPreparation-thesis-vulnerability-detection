using Extractor.Configurations;
using Extractor.Entities;
using Extractor.Rewriters;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Text.RegularExpressions;
using System.Xml.Linq;

namespace Extractor.Extractors
{
    public class Sard105Extractor : Extractor
    {
        private readonly Sard105Configuration config;
        protected readonly string[] cwes;
        private readonly List<DataSetStatistics> statistics = new();

        public Sard105Extractor(Sard105Configuration config)
        {
            this.config = config;
            this.cwes = config.CWEs.Split(';');
            InitStatistics();
            CreateOutputCweDirectories(this.cwes, config.OutputLocation);
        }

        /// <summary>
        /// Extract the SARD vulnerability test cases by using the manifest file and save them in a folder.
        /// </summary>
        /// <remarks>
        /// The manifest file must be placed in the root folder of the folder containing the test cases.
        /// This is the case when downloaded from https://samate.nist.gov/SARD/test-suites/105.
        /// </remarks>
        public override void ExtractCases()
        {
            var xml = XDocument.Load(this.config.ManifestFile);

            var testCases = xml.Descendants("container").Elements().Elements("file")
                .Where(item => cwes.Contains(GetCweFromPath(item.Attribute("path").ToString())))
                .Select(item => item.Parent)
                .Distinct();

            var manifestLocation = GetManifestLocation();

            foreach (var testCase in testCases)
            {
                string testCaseLocation = string.Empty;
                try
                {
                    testCaseLocation = testCase.Elements("file").Single().Attribute("path").Value;
                }
                catch (InvalidOperationException ex)
                {
                    // Skip test cases that depend on using multiple files/classes/methods.
                    continue;
                }

                var isVulnerableSample = testCase.Elements("file").Single().Elements("flaw").Any();
                var cwe = GetCweFromPath(testCaseLocation).Replace("_", string.Empty).ToUpper();
                var fileName = GetFileNameFromPath(testCaseLocation);

                var samplePath = Path.GetFullPath(Path.Join(manifestLocation, testCaseLocation));
                var labeledSampleTree = GetLabeledSyntaxNode(samplePath, isVulnerableSample).NormalizeWhitespace();

                var methods = labeledSampleTree.DescendantNodes().Where(a => a.IsKind(SyntaxKind.MethodDeclaration));
                var numberOfSamples = methods.Count();
                var numberOfBadSamples = methods.Where(a => ((MethodDeclarationSyntax)a).Identifier.Text == "Bad").Count();
                var numberOfGoodSamples = methods.Where(a => ((MethodDeclarationSyntax)a).Identifier.Text == "Good").Count();
                if (numberOfSamples != 1)
                {
                    //Console.WriteLine(numberOfSamples + " found in " + samplePath);
                    // Skip test cases that depend on using multiple methods.
                    continue;
                }

                SaveSample(labeledSampleTree, cwe, this.config.OutputLocation, samplePath);

                this.statistics.Single(a => a.Cwe == cwe).TotalSamples += numberOfSamples;
                this.statistics.Single(a => a.Cwe == cwe).VulnerableSamples += numberOfBadSamples;
                this.statistics.Single(a => a.Cwe == cwe).SafeSamples += numberOfGoodSamples;
            }

            SaveStatistics(this.config.OutputLocation, "Sard105_Statistics.txt", this.statistics);
        }

        protected override SyntaxNode GetLabeledSyntaxNode(string filePath, bool isVulnerable)
        {
            string fileText = File.ReadAllText(filePath);
            SyntaxTree syntaxTree = CSharpSyntaxTree.ParseText(fileText).WithFilePath(filePath);

            var methodNameRewriter = new MethodNameRewriter(isVulnerable);
            return methodNameRewriter.Visit(syntaxTree.GetRoot());
        }

        /// <summary>
        /// Create an entry in the statistics collection for each cwe category.
        /// </summary>
        private void InitStatistics()
        {
            foreach (var cwe in this.cwes)
            {
                statistics.Add(new DataSetStatistics(cwe.Replace("_", string.Empty).ToUpper()));
            }
        }

        private string GetManifestLocation()
        {
            var locationParts = this.config.ManifestFile.Split("/");
            return string.Join("/", locationParts.Take(locationParts.Length - 1));
        }

        private static string GetCweFromPath(string path) => Regex.Match(path, "cwe_[0-9]{1,5}").Value;

        private static string GetFileNameFromPath(string path) => path.Split("/").Last();
    }
}
