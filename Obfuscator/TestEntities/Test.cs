using System.Data.SqlClient;

namespace Obfuscator.TestEntities
{
    internal class Test
    {
        // TODO: create unit tests for all possibilities
        private string _privateString = string.Empty;
        private readonly string _attributeValue;
        const string testContString = "test const text";
        const string test1 = "", test2 = "";


        const int testConstInt = 2;

        public List<int> TestListProperty { get; set; }

        public List<SqlCommand> TestSqlCommandsList { get; set; }

        public string TestStringPropertyFields
        {
            get { return _privateString; }
            set { _privateString = value; }
        }

        public int TestIntProperty { get; set; }

        public string TestProperty { get; set; }



        void Method(string testParameter, int intParameter = 5)
        {
            _privateString = testParameter;
            this.TestIntProperty = 5; // modify property
            var testVariable = "test variable text";
            testVariable = _privateString;
            testVariable += "Modify test variable text";

            this.TestIntProperty++;
            List<int> intList = new List<int>();
            string[] testStringArray = { "", "test2" };
            var argumentTest = testStringArray.Contains(testVariable);
            var argumentTestType = argumentTest.GetType();
            int testNumberVariable = 1;
            var testInt1 = 3;
            int testInt2, testInt3;
            double a, b = 4.0;
            SqlCommand badSqlCommand = null;
            badSqlCommand.CommandText = "";
        }

        private string Method2()
        {
            try
            {

            }
            catch (SqlException exceptSql)
            {

            }
            var stringList = new List<string>() { "0", "1", "2" };
            foreach (string stringEntry in stringList)
            {
                Console.WriteLine(stringEntry);
            }

            foreach (var stringEntry1 in stringList)
            {
                Console.WriteLine(stringEntry1);
            }

            for (int i = 0; i < stringList.Count; i++)
            {
                Console.WriteLine(stringList.ElementAt(i));
            }

            for (var i = 0; i < stringList.Count; i++)
            {
                Console.WriteLine(stringList.ElementAt(i));
            }

            return string.Empty;
        }
    }
}
