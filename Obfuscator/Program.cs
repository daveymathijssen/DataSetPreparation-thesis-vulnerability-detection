using Obfuscator.Helpers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.Extensions.DependencyModel;
using Obfuscator.Obfuscators;
using Obfuscator.Configurations;
using Microsoft.Extensions.Configuration;

ConfigurationBuilder configurationBuilder = new();
IConfiguration c = configurationBuilder.AddJsonFile("appsettings.json").AddEnvironmentVariables().Build();
var obfuscatorConfig = c.GetRequiredSection("ObfuscatorConfiguration").Get<ObfuscatorConfiguration>();

// Check the configuration
if (string.IsNullOrWhiteSpace(obfuscatorConfig.SamplesLocation))
{
    throw new NullReferenceException("No samples location defined in the appsettings.json file. Unable to perform obfuscation.");
}

if (string.IsNullOrWhiteSpace(obfuscatorConfig.OutputLocation))
{
    throw new NullReferenceException("No output location defined in the appsettings.json file. Unable to perform obfuscation.");
}

// Create output location directory (if not existing)
Directory.CreateDirectory(Path.GetFullPath(obfuscatorConfig.OutputLocation));

Compilation compilation = CreateCompilation();

foreach (SyntaxTree sourceTree in compilation.SyntaxTrees)
{
    SemanticModel model = compilation.GetSemanticModel(sourceTree);
    var rewriter = ObfuscatorFactory.Create(obfuscatorConfig.ObfuscationMethod, model);
    SyntaxNode obfuscatedTree = rewriter.Visit(sourceTree.GetRoot());

    var fileName = sourceTree.FilePath;
    ObfuscatorHelpers.SaveSample(obfuscatedTree, "", obfuscatorConfig.OutputLocation, sourceTree.FilePath);
}

Compilation CreateCompilation()
{
    string path = obfuscatorConfig.SamplesLocation;
    string[] files;
    List<SyntaxTree> syntaxTrees = new();
    if (Directory.Exists(path))
    {
        files = Directory.GetFiles(path, "*.cs", SearchOption.AllDirectories);
    }
    else
    {
        files = new string[] { path };
    }

    foreach (var filePath in files)
    {
        string fileText = File.ReadAllText(filePath);
        SyntaxTree syntaxTree = CSharpSyntaxTree.ParseText(fileText).WithFilePath(filePath);
        syntaxTrees.Add(syntaxTree);
    }

    SyntaxTree[] sourceTrees = syntaxTrees.ToArray();

    // creation of the syntax tree for every file
    //string testClassPath = @"Test.cs";
    //string TestClassText = File.ReadAllText(testClassPath);
    //SyntaxTree TestClassTree = CSharpSyntaxTree.ParseText(TestClassText)
    //                        .WithFilePath(testClassPath);

    //string rewriterPath = @"CWE89_SQL_Injection__Web_Database_CommandText_66b.cs";
    //string rewriterText = File.ReadAllText(rewriterPath);
    //SyntaxTree rewriterTree = CSharpSyntaxTree.ParseText(rewriterText)
    //                         .WithFilePath(rewriterPath);

    //SyntaxTree[] sourceTrees = { TestClassTree, rewriterTree };

    // gathering the assemblies
    //MetadataReference mscorlib = MetadataReference.CreateFromFile(typeof(object).GetTypeInfo().Assembly.Location);
    //MetadataReference systemconsolelib = MetadataReference.CreateFromFile(typeof(System.Console).GetTypeInfo().Assembly.Location);
    //MetadataReference systemDataSqlClientlib = MetadataReference.CreateFromFile(typeof(System.Data.SqlClient.SqlConnection).GetTypeInfo().Assembly.Location);
    //MetadataReference SystemDataCommonLib = MetadataReference.CreateFromFile(typeof(System.Data.Common.DbConnection).GetTypeInfo().Assembly.Location);
    //MetadataReference codeAnalysis = MetadataReference.CreateFromFile(typeof(SyntaxTree).GetTypeInfo().Assembly.Location);
    //MetadataReference csharpCodeAnalysis = MetadataReference.CreateFromFile(typeof(CSharpSyntaxTree).GetTypeInfo().Assembly.Location);
    //MetadataReference runtimedll = MetadataReference.CreateFromFile(Path.Combine(Path.GetDirectoryName(typeof(object).GetTypeInfo().Assembly.Location), "System.Runtime.dll"));

    //MetadataReference[] references = { mscorlib, systemconsolelib, systemDataSqlClientlib, SystemDataCommonLib, codeAnalysis, csharpCodeAnalysis, runtimedll };

    //https://github.com/dotnet/core/issues/2082#issuecomment-442713181
    MetadataReference[] references =
        DependencyContext.Default.CompileLibraries
        .SelectMany(cl => cl.ResolveReferencePaths())
        .Select(asm => MetadataReference.CreateFromFile(asm))
        .ToArray();

    // compilation
    return CSharpCompilation.Create("ConsoleApplication",
                                     sourceTrees,
                                     references,
                                     new CSharpCompilationOptions(OutputKind.ConsoleApplication));
}